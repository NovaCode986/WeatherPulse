<<<<<<< HEAD
import { ObservableInputTuple, OperatorFunction, SchedulerLike } from 'rxjs/src/internal/types';
import { operate } from 'rxjs/src/internal/util/lift';
import { concatAll } from 'rxjs/src/internal/operators/concatAll';
import { popScheduler } from 'rxjs/src/internal/util/args';
import { from } from 'rxjs/src/internal/observable/from';
=======
import { ObservableInputTuple, OperatorFunction, SchedulerLike } from '../types';
import { operate } from '../util/lift';
import { concatAll } from './concatAll';
import { popScheduler } from '../util/args';
import { from } from '../observable/from';
>>>>>>> 8cbd697f2133b9c8bd6fbc78fe0bc86a3495f0d5

/** @deprecated Replaced with {@link concatWith}. Will be removed in v8. */
export function concat<T, A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): OperatorFunction<T, T | A[number]>;
/** @deprecated Replaced with {@link concatWith}. Will be removed in v8. */
export function concat<T, A extends readonly unknown[]>(
  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]
): OperatorFunction<T, T | A[number]>;

/**
 * @deprecated Replaced with {@link concatWith}. Will be removed in v8.
 */
export function concat<T, R>(...args: any[]): OperatorFunction<T, R> {
  const scheduler = popScheduler(args);
  return operate((source, subscriber) => {
    concatAll()(from([source, ...args], scheduler)).subscribe(subscriber);
  });
}
